{"version":3,"file":"static/js/682.74b71ba3.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img\r\n         style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n         src={img}\r\n         alt=\"error-image\"\r\n      />\r\n   );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n   switch (process) {\n      case 'waiting':\n         return <Spinner />;\n\n      case 'loading':\n         return newItemLoading ? <Component /> : <Spinner />;\n\n      case 'confirmed':\n         return <Component />;\n\n      case 'error':\n         return <ErrorMessage />;\n\n      default:\n         throw new Error('❌ Unexpected process state');\n   }\n};\n\nconst ComicsList = () => {\n   const [comicsList, setComicsList] = useState([]);\n   const [newItemLoading, setNewItemLoading] = useState(false);\n   const [offset, setOffset] = useState(0);\n   const [comicsEnded, setComicsEnded] = useState(false);\n\n   const { getAllComics, process, setProcess } = useMarvelService();\n\n   useEffect(() => {\n      onRequest(offset, true);\n      // eslint-disable-next-line\n   }, []);\n\n   const onRequest = (offset, initial) => {\n      initial ? setNewItemLoading(false) : setNewItemLoading(true);\n      getAllComics(offset)\n         .then(onComicsListLoaded)\n         .then(() => setProcess('confirmed'));\n   };\n\n   const onComicsListLoaded = async (newComicsList) => {\n      let ended = false;\n      if (newComicsList.length < 8) {\n         ended = true;\n      }\n\n      for (let comic of newComicsList) {\n         setComicsList((comicsList) => [...comicsList, comic]);\n      }\n\n      setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n      setNewItemLoading(false);\n      setOffset((offset) => offset + 8);\n      setComicsEnded(ended);\n   };\n\n   function renderItems(arr) {\n      const items = arr.map((item) => {\n         return (\n            <CSSTransition key={item.id} timeout={500} classNames=\"comics__item\">\n               <li className=\"comics__item\">\n                  <Link to={`/comics/${item.id}`}>\n                     <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                     <div className=\"comics__item-name\">{item.title}</div>\n                     <div className=\"comics__item-price\">{item.price}</div>\n                  </Link>\n               </li>\n            </CSSTransition>\n         );\n      });\n\n      return (\n         <ul className=\"comics__grid\">\n            <TransitionGroup appear={true} component={null}>\n               {items}\n            </TransitionGroup>\n         </ul>\n      );\n   }\n\n   return (\n      <div className=\"comics__list\">\n         {setContent(process, () => renderItems(comicsList), newItemLoading)}\n         <button\n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            style={{ display: comicsEnded ? 'none' : 'block' }}\n            onClick={() => onRequest(offset)}\n         >\n            <div className=\"inner\">load more</div>\n         </button>\n      </div>\n   );\n};\n\nexport default ComicsList;\n","import { Helmet } from 'react-helmet-async';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <meta name=\"description\" content=\"Page with list of our Marvel comics\" />\r\n            <title>Marvel | Comics Page</title>\r\n         </Helmet>\r\n\r\n         <AppBanner />\r\n         <ComicsList />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n   const [process, setProcess] = useState('waiting');\r\n\r\n   const request = useCallback(\r\n      async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n         setProcess('loading');\r\n\r\n         try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n         } catch (e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n         }\r\n      },\r\n      []\r\n   );\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess('loading');\r\n   }, []);\r\n\r\n   return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n   const { request, clearError, process, setProcess } = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=df8911a2f5c25ff7bce1363a6b88bb90';\r\n   const _baseOffset = 210;\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacterByName = async (name) => {\r\n      const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n   };\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics);\r\n   };\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n   };\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name.length > 22 ? `${char.name.slice(0, 22)}...` : char.name,\r\n         description: char.description\r\n            ? `${char.description.slice(0, 180)}...`\r\n            : 'Nothing is known about that character.',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items.slice(0, 10),\r\n      };\r\n   };\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description.',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects[0]?.language || 'en-us',\r\n         price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      };\r\n   };\r\n\r\n   return {\r\n      clearError,\r\n      process,\r\n      setProcess,\r\n      getAllCharacters,\r\n      getCharacterByName,\r\n      getCharacter,\r\n      getAllComics,\r\n      getComic,\r\n   };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","async","ended","newComicsList","length","comic","arr","items","map","item","CSSTransition","timeout","classNames","Link","to","concat","id","thumbnail","title","price","TransitionGroup","appear","component","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","slice","description","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacterByName","getCharacter","res","getComic"],"sourceRoot":""}