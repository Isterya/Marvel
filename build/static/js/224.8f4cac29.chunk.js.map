{"version":3,"file":"static/js/224.8f4cac29.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img\r\n         style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n         src={img}\r\n         alt=\"error-image\"\r\n      />\r\n   );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n   const [char, setChar] = useState({});\n\n   const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n   useEffect(() => {\n      updateChar();\n      const timerId = setInterval(updateChar, 120000);\n\n      return () => {\n         clearInterval(timerId);\n      };\n   }, []);\n\n   const onCharLoaded = (char) => {\n      setChar(char);\n   };\n\n   const updateChar = () => {\n      clearError();\n      const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n      getCharacter(id)\n         .then(onCharLoaded)\n         .then(() => setProcess('confirmed'));\n   };\n\n   return (\n      <div className=\"randomchar\">\n         {setContent(process, View, char)}\n         <div className=\"randomchar__static\">\n            <p className=\"randomchar__title\">\n               Random character for today!\n               <br />\n               Do you want to get to know him better?\n            </p>\n            <p className=\"randomchar__title\">Or choose another one</p>\n            <button onClick={updateChar} className=\"button button__main\">\n               <div className=\"inner\">try it</div>\n            </button>\n            <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n         </div>\n      </div>\n   );\n};\n\nconst View = ({ data }) => {\n   const { name, description, thumbnail, homepage, wiki } = data;\n\n   return (\n      <div className=\"randomchar__block\">\n         <img\n            src={thumbnail}\n            alt=\"Random character\"\n            className=\"randomchar__img\"\n            style={thumbnail ? { objectFit: 'contain' } : thumbnail}\n         />\n         <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">{description}</p>\n            <div className=\"randomchar__btns\">\n               <a href={homepage} className=\"button button__main\">\n                  <div className=\"inner\">homepage</div>\n               </a>\n               <a href={wiki} className=\"button button__secondary\">\n                  <div className=\"inner\">Wiki</div>\n               </a>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n   switch (process) {\n      case 'waiting':\n         return <Spinner />;\n\n      case 'loading':\n         return newItemLoading ? <Component /> : <Spinner />;\n\n      case 'confirmed':\n         return <Component />;\n\n      case 'error':\n         return <ErrorMessage />;\n\n      default:\n         throw new Error('❌ Unexpected process state');\n   }\n};\n\nconst CharList = (props) => {\n   const [charList, setCharList] = useState([]);\n   const [newItemLoading, setnewItemLoading] = useState(false);\n   const [offset, setOffset] = useState(210);\n   const [charEnded, setCharEnded] = useState(false);\n\n   const { getAllCharacters, process, setProcess } = useMarvelService();\n\n   useEffect(() => {\n      onRequest(offset, true);\n      // eslint-disable-next-line\n   }, []);\n\n   const onRequest = (offset, initial) => {\n      initial ? setnewItemLoading(false) : setnewItemLoading(true);\n      getAllCharacters(offset)\n         .then(onCharListLoaded)\n         .then(() => setProcess('confirmed'));\n   };\n\n   const onCharListLoaded = async (newCharList) => {\n      let ended = false;\n      if (newCharList.length < 9) {\n         ended = true;\n      }\n\n      for (let char of newCharList) {\n         setCharList((charList) => [...charList, char]);\n      }\n\n      setnewItemLoading(false);\n      setOffset(offset + 9);\n      setCharEnded(ended);\n   };\n\n   const itemRefs = useRef([]);\n\n   const focusOnItem = (id) => {\n      itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n      itemRefs.current[id].classList.add('char__item_selected');\n      itemRefs.current[id].focus();\n   };\n\n   function renderItems(arr) {\n      const items = arr.map((item, i) => {\n         let imgStyle = { objectFit: 'cover' };\n         if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = { objectFit: 'unset' };\n         }\n\n         return (\n            <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n               <li\n                  className=\"char__item\"\n                  tabIndex={0}\n                  ref={(el) => (itemRefs.current[i] = el)}\n                  onClick={() => {\n                     props.onCharSelected(item.id);\n                     focusOnItem(i);\n                  }}\n                  onKeyPress={(e) => {\n                     if (e.key === ' ' || e.key === 'Enter') {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                     }\n                  }}\n               >\n                  <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                  <div className=\"char__name\">{item.name}</div>\n               </li>\n            </CSSTransition>\n         );\n      });\n\n      return (\n         <ul className=\"char__grid\">\n            <TransitionGroup appear={true} component={null}>\n               {items}\n            </TransitionGroup>\n         </ul>\n      );\n   }\n\n   const elements = useMemo(() => {\n      return setContent(process, () => renderItems(charList), newItemLoading);\n   }, [process]);\n\n   return (\n      <div className=\"char__list\">\n         {elements}\n         <button\n            disabled={newItemLoading}\n            style={{ display: charEnded ? 'none' : 'block' }}\n            className=\"button button__main button__long\"\n            onClick={() => onRequest(offset)}\n         >\n            <div className=\"inner\">load more</div>\n         </button>\n      </div>\n   );\n};\n\nCharList.propTypes = {\n   onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n   const [char, setChar] = useState(null);\n\n   const { clearError, getCharacter, process, setProcess } = useMarvelService();\n\n   useEffect(() => {\n      updateChar();\n   }, [props.charId]);\n\n   const updateChar = () => {\n      const { charId } = props;\n      if (!charId) {\n         return;\n      }\n\n      clearError();\n      getCharacter(charId)\n         .then(onCharLoaded)\n         .then(() => setProcess('confirmed'));\n   };\n\n   const onCharLoaded = (char) => {\n      setChar(char);\n   };\n\n   return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n   const { name, description, thumbnail, homepage, wiki, comics } = data;\n   return (\n      <>\n         <div className=\"char__basics\">\n            <img src={thumbnail} alt=\"{name}\" style={thumbnail ? { objectFit: 'contain' } : thumbnail} />\n            <div>\n               <div className=\"char__info-name\">{name}</div>\n               <div className=\"char__btns\">\n                  <a href={homepage} className=\"button button__main\">\n                     <div className=\"inner\">homepage</div>\n                  </a>\n                  <a href={wiki} className=\"button button__secondary\">\n                     <div className=\"inner\">Wiki</div>\n                  </a>\n               </div>\n            </div>\n         </div>\n         <div className=\"char__descr\">{description}</div>\n         <div className=\"char__comics\">Comics:</div>\n         <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There are no comics with this character'}\n            {comics.map((item, i) => {\n               const comicsId = item.resourceURI.split('/').pop();\n               return (\n                  <li key={i} className=\"char__comics-item\">\n                     <Link to={`/comics/${comicsId}`}>{item.name}</Link>\n                  </li>\n               );\n            })}\n         </ul>\n      </>\n   );\n};\n\nCharInfo.propTypes = {\n   charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      error: false,\r\n   };\r\n\r\n   componentDidCatch(error, errorInfo) {\r\n      console.log(error, errorInfo);\r\n      this.setState({\r\n         error: true,\r\n      });\r\n   }\r\n\r\n   render() {\r\n      if (this.state.error) {\r\n         return <ErrorMessage />;\r\n      }\r\n\r\n      return this.props.children;\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n   const [char, setChar] = useState(null);\r\n   const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n   const onCharLoaded = (char) => {\r\n      setChar(char);\r\n   };\r\n\r\n   const updateChar = (name) => {\r\n      clearError();\r\n\r\n      getCharacterByName(name)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess('confirmed'));\r\n   };\r\n\r\n   const errorMessage =\r\n      process === 'error' ? (\r\n         <div className=\"char__search-critical-error\">\r\n            <ErrorMessage />\r\n         </div>\r\n      ) : null;\r\n\r\n   const results = !char ? null : char.length > 0 ? (\r\n      <div className=\"char__search-wrapper\">\r\n         <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n         <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n            <div className=\"inner\">To page</div>\r\n         </Link>\r\n      </div>\r\n   ) : (\r\n      <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n   );\r\n\r\n   return (\r\n      <div className=\"char__search-form\">\r\n         <Formik\r\n            initialValues={{ charName: '' }}\r\n            validationSchema={Yup.object({\r\n               charName: Yup.string().required('This field is required'),\r\n            })}\r\n            onSubmit={({ charName }) => {\r\n               updateChar(charName);\r\n            }}\r\n         >\r\n            <Form>\r\n               <label htmlFor=\"charName\" className=\"char__search-label\">\r\n                  Or find a character by name:\r\n               </label>\r\n               <div className=\"char__search-wrapper\">\r\n                  <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n                  <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n                     <div className=\"inner\">find</div>\r\n                  </button>\r\n               </div>\r\n               <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n            </Form>\r\n         </Formik>\r\n         {results}\r\n         {errorMessage}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n   const [selectedChar, setChar] = useState(null);\r\n\r\n   const onCharSelected = (id) => {\r\n      setChar(id);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <meta name=\"description\" content=\"Marvel information portal\" />\r\n            <title>Marvel | Information Portal</title>\r\n         </Helmet>\r\n\r\n         <ErrorBoundary>\r\n            <RandomChar />\r\n         </ErrorBoundary>\r\n         <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n               <CharList onCharSelected={onCharSelected} />\r\n            </ErrorBoundary>\r\n            <div>\r\n               <ErrorBoundary>\r\n                  <CharInfo charId={selectedChar} />\r\n               </ErrorBoundary>\r\n               <ErrorBoundary>\r\n                  <CharSearchForm />\r\n               </ErrorBoundary>\r\n            </div>\r\n         </div>\r\n         <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n   const [process, setProcess] = useState('waiting');\r\n\r\n   const request = useCallback(\r\n      async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n         setProcess('loading');\r\n\r\n         try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n         } catch (e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n         }\r\n      },\r\n      []\r\n   );\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess('loading');\r\n   }, []);\r\n\r\n   return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n   const { request, clearError, process, setProcess } = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=df8911a2f5c25ff7bce1363a6b88bb90';\r\n   const _baseOffset = 210;\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacterByName = async (name) => {\r\n      const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n   };\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics);\r\n   };\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n   };\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name.length > 22 ? `${char.name.slice(0, 22)}...` : char.name,\r\n         description: char.description\r\n            ? `${char.description.slice(0, 180)}...`\r\n            : 'Nothing is known about that character.',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items.slice(0, 10),\r\n      };\r\n   };\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description.',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects[0]?.language || 'en-us',\r\n         price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      };\r\n   };\r\n\r\n   return {\r\n      clearError,\r\n      process,\r\n      setProcess,\r\n      getAllCharacters,\r\n      getCharacterByName,\r\n      getCharacter,\r\n      getAllComics,\r\n      getComic,\r\n   };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n   switch (process) {\r\n      case 'waiting':\r\n         return <Skeleton />;\r\n\r\n      case 'loading':\r\n         return <Spinner />;\r\n\r\n      case 'confirmed':\r\n         return <Component data={data} />;\r\n\r\n      case 'error':\r\n         return <ErrorMessage />;\r\n\r\n      default:\r\n         throw new Error('❌ Unexpected process state');\r\n   }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","appear","component","renderItems","disabled","comics","_Fragment","comicsId","resourceURI","split","pop","Link","to","concat","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}