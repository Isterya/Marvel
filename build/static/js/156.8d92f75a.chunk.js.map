{"version":3,"file":"static/js/156.8d92f75a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img\r\n         style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n         src={img}\r\n         alt=\"error-image\"\r\n      />\r\n   );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport setContent from '../../utils/setContent';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n   const { id } = useParams();\r\n   const [data, setData] = useState(null);\r\n   const { clearError, getComic, getCharacter, process, setProcess } = useMarvelService();\r\n\r\n   useEffect(() => {\r\n      updateData();\r\n   }, [id]);\r\n\r\n   const updateData = () => {\r\n      clearError();\r\n\r\n      switch (dataType) {\r\n         case 'comic':\r\n            getComic(id)\r\n               .then(onDataLoaded)\r\n               .then(() => setProcess('confirmed'));\r\n            break;\r\n\r\n         case 'character':\r\n            getCharacter(id)\r\n               .then(onDataLoaded)\r\n               .then(() => setProcess('confirmed'));\r\n            break;\r\n\r\n         default:\r\n            throw new Error('❌ Unexpected data type');\r\n      }\r\n   };\r\n\r\n   const onDataLoaded = (data) => {\r\n      setData(data);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <AppBanner />\r\n         {setContent(process, Component, data)}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n   const [process, setProcess] = useState('waiting');\r\n\r\n   const request = useCallback(\r\n      async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n         setProcess('loading');\r\n\r\n         try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n         } catch (e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n         }\r\n      },\r\n      []\r\n   );\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess('loading');\r\n   }, []);\r\n\r\n   return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n   const { request, clearError, process, setProcess } = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=df8911a2f5c25ff7bce1363a6b88bb90';\r\n   const _baseOffset = 210;\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacterByName = async (name) => {\r\n      const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   };\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n   };\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics);\r\n   };\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n   };\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name.length > 22 ? `${char.name.slice(0, 22)}...` : char.name,\r\n         description: char.description\r\n            ? `${char.description.slice(0, 210)}...`\r\n            : 'Nothing is known about that character.',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items.slice(0, 10),\r\n      };\r\n   };\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description.',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects[0]?.language || 'en-us',\r\n         price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      };\r\n   };\r\n\r\n   return {\r\n      clearError,\r\n      process,\r\n      setProcess,\r\n      getAllCharacters,\r\n      getCharacterByName,\r\n      getCharacter,\r\n      getAllComics,\r\n      getComic,\r\n   };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n   switch (process) {\r\n      case 'waiting':\r\n         return <Skeleton />;\r\n\r\n      case 'loading':\r\n         return <Spinner />;\r\n\r\n      case 'confirmed':\r\n         return <Component data={data} />;\r\n\r\n      case 'error':\r\n         return <ErrorMessage />;\r\n\r\n      default:\r\n         throw new Error('❌ Unexpected process state');\r\n   }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","clearError","getComic","getCharacter","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","slice","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","Skeleton","Spinner"],"sourceRoot":""}